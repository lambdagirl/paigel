[{"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "article", "model": "article"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "article", "model": "images"}}, {"model": "sessions.session", "pk": "279exkxo7gjikunasx8cgna9mojkizbo", "fields": {"session_data": "NWFjM2IwMjE3NjdjZmU2YmMxYjBiNmNiZGZkYzI0OGYxNmRhN2JlZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI5NjM0ZGI1ZDVhNjUzNzMzNTdkYTI0YmIyMzk3NTdkZjFlMmZhY2Q4In0=", "expire_date": "2019-03-22T17:44:01.053Z"}}, {"model": "sessions.session", "pk": "5adahswvg5iaf4j8trwf1iso8yenrny0", "fields": {"session_data": "NWFjM2IwMjE3NjdjZmU2YmMxYjBiNmNiZGZkYzI0OGYxNmRhN2JlZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI5NjM0ZGI1ZDVhNjUzNzMzNTdkYTI0YmIyMzk3NTdkZjFlMmZhY2Q4In0=", "expire_date": "2019-03-13T05:01:22.236Z"}}, {"model": "sessions.session", "pk": "67gshdsdo4sr67yo2mz5ohlcodvzkfn4", "fields": {"session_data": "NWFjM2IwMjE3NjdjZmU2YmMxYjBiNmNiZGZkYzI0OGYxNmRhN2JlZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI5NjM0ZGI1ZDVhNjUzNzMzNTdkYTI0YmIyMzk3NTdkZjFlMmZhY2Q4In0=", "expire_date": "2019-03-11T18:49:30.895Z"}}, {"model": "sessions.session", "pk": "drmujdj0he4gqllu6ryia3dgs9xx21g2", "fields": {"session_data": "NWFjM2IwMjE3NjdjZmU2YmMxYjBiNmNiZGZkYzI0OGYxNmRhN2JlZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI5NjM0ZGI1ZDVhNjUzNzMzNTdkYTI0YmIyMzk3NTdkZjFlMmZhY2Q4In0=", "expire_date": "2019-03-12T14:43:59.873Z"}}, {"model": "sessions.session", "pk": "euy1hgkvlsvu9a20volb7i5hlkqps5x2", "fields": {"session_data": "NWFjM2IwMjE3NjdjZmU2YmMxYjBiNmNiZGZkYzI0OGYxNmRhN2JlZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI5NjM0ZGI1ZDVhNjUzNzMzNTdkYTI0YmIyMzk3NTdkZjFlMmZhY2Q4In0=", "expire_date": "2019-03-14T00:50:52.633Z"}}, {"model": "sessions.session", "pk": "g63v1nf3s0d4iiop1kivj8u7oafjvyn3", "fields": {"session_data": "NWFjM2IwMjE3NjdjZmU2YmMxYjBiNmNiZGZkYzI0OGYxNmRhN2JlZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI5NjM0ZGI1ZDVhNjUzNzMzNTdkYTI0YmIyMzk3NTdkZjFlMmZhY2Q4In0=", "expire_date": "2019-03-12T03:50:13.584Z"}}, {"model": "sessions.session", "pk": "nrx2b8bwm470afbhhsai6qz5uk6lnc92", "fields": {"session_data": "NWFjM2IwMjE3NjdjZmU2YmMxYjBiNmNiZGZkYzI0OGYxNmRhN2JlZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI5NjM0ZGI1ZDVhNjUzNzMzNTdkYTI0YmIyMzk3NTdkZjFlMmZhY2Q4In0=", "expire_date": "2019-03-17T19:32:22.203Z"}}, {"model": "sessions.session", "pk": "qqpetux96jwoa7oi9zx156i1r0n380fa", "fields": {"session_data": "NWFjM2IwMjE3NjdjZmU2YmMxYjBiNmNiZGZkYzI0OGYxNmRhN2JlZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI5NjM0ZGI1ZDVhNjUzNzMzNTdkYTI0YmIyMzk3NTdkZjFlMmZhY2Q4In0=", "expire_date": "2019-03-11T20:08:12.908Z"}}, {"model": "sessions.session", "pk": "wezbz6pe8f82pz9y7jx4l79so2mxeqyg", "fields": {"session_data": "NWFjM2IwMjE3NjdjZmU2YmMxYjBiNmNiZGZkYzI0OGYxNmRhN2JlZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI5NjM0ZGI1ZDVhNjUzNzMzNTdkYTI0YmIyMzk3NTdkZjFlMmZhY2Q4In0=", "expire_date": "2019-03-21T03:46:06.517Z"}}, {"model": "article.article", "pk": 1, "fields": {"title": "Django File (and Image) Uploads Tutorial", "slug": "django-file-and-image-uploads-tutorial", "body": "This tutorial shows how to implement file and then image uploading with Django. We\u2019ll build a basic Instagram clone.\r\n\r\nSetup\r\nIf you\u2019re on a Mac the Desktop is a convenient place to put our code. The location doesn\u2019t matter; it just needs to be easily available.\r\n\r\nOn the command line, navigate there and create a directory insta for our files. We will use Pipenv to install both Django and pillow which is a Python image process library Django relies on for image files. For non-image file uploads pillow is not needed. Finally activate our new virtual environment with the shell command.\r\n\r\n$ cd ~/Desktop\r\n$ mkdir insta && cd insta\r\n$ pipenv install django==2.1.5 pillow==5.4.1\r\n$ pipenv shell\r\n(insta) $\r\nYou should see (insta) going forward to indicate we\u2019re in an active virtual environment. You can type exit at any time to leave it and pipenv shell to re-enter.\r\n\r\nProject and App\r\nNow create our new Django project called insta_project and a new app called posts.\r\n\r\n(insta) $ django-admin startproject insta_project .\r\n(insta) $ python manage.py startapp posts\r\nSince we\u2019ve added a new app we need to tell Django about it at the bottom of the INSTALLED_APPS configuration in settings.py.\r\n\r\n# insta_project/settings.py\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'posts.apps.PostsConfig', # new\r\n]\r\nNow run python manage.py migrate to setup the new database for our project.\r\n\r\n(insta) $ python manage.py migrate\r\nOperations to perform:\r\n  Apply all migrations: admin, auth, contenttypes, sessions\r\nRunning migrations:\r\n  Applying contenttypes.0001_initial... OK\r\n  Applying auth.0001_initial... OK\r\n  Applying admin.0001_initial... OK\r\n  Applying admin.0002_logentry_remove_auto_add... OK\r\n  Applying admin.0003_logentry_add_action_flag_choices... OK\r\n  Applying contenttypes.0002_remove_content_type_name... OK\r\n  Applying auth.0002_alter_permission_name_max_length... OK\r\n  Applying auth.0003_alter_user_email_max_length... OK\r\n  Applying auth.0004_alter_user_username_opts... OK\r\n  Applying auth.0005_alter_user_last_login_null... OK\r\n  Applying auth.0006_require_contenttypes_0002... OK\r\n  Applying auth.0007_alter_validators_add_error_messages... OK\r\n  Applying auth.0008_alter_user_username_max_length... OK\r\n  Applying auth.0009_alter_user_last_name_max_length... OK\r\n  Applying sessions.0001_initial... OK\r\nModels\r\nStarting with the database model is a good choice. In our case our model Post will only have two fields: title and image. We\u2019ll also include a __str__ method below so that the title appears in our Django admin later on.\r\n\r\n# posts/models.py\r\nfrom django.db import models\r\n\r\n\r\nclass Post(models.Model):\r\n    title = models.TextField()\r\n    cover = models.ImageField(upload_to='images/')\r\n\r\n    def __str__(self):\r\n        return self.title\r\nThe location of the uploaded image will be in MEDIA_ROOT/imags. In Django, the MEDIA_ROOT setting is where we define the location of all user uploaded items. We\u2019ll set that now.\r\n\r\nIf we wanted to use a regular file here the only difference could be to change ImageField to FileField.\r\n\r\nMEDIA_ROOT\r\nOpen up insta_project/settings.py in your text editor. We will add two new configurations. By default MEDIA_URL and MEDIA_ROOT are empty and not displayed so we need to configure them:\r\n\r\nMEDIA_ROOT is the absolute filesystem path to the directory for user-uploaded files\r\nMEDIA_URL is the URL we can use in our templates for the files\r\n# insta_project/settings.py\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\r\nWe could pick a name other than media here but this is the Django convention. We\u2019ll also make an images folder within it to use shortly.\r\n\r\n(insta) $ mkdir media\r\n(insta) $ mkdir media/images\r\nAdmin\r\nNow update the posts/admin.py file so we can see our Post app in the Django admin.\r\n\r\n# posts/admin.py\r\nfrom django.contrib import admin\r\n\r\nfrom .models import Post\r\n\r\nadmin.site.register(Post)\r\nAnd we\u2019re all set! Generate a new migrations file.\r\n\r\n(insta) $ python manage.py makemigrations\r\nMigrations for 'posts':\r\n  posts/migrations/0001_initial.py\r\n    - Create model Post\r\nThen run migrate to update the database.\r\n\r\n(insta) $ python manage.py migrate\r\nOperations to perform:\r\n  Apply all migrations: admin, auth, contenttypes, posts, session\r\ns\r\nRunning migrations:\r\n  Applying posts.0001_initial... OK\r\nNow we can create a superuser account to access the admin and then execute runserver to spin up the local web server for the first time.\r\n\r\n(insta) $ python manage.py createsuperuser\r\n(insta) $ python manage.py runserver\r\nIf you go to http://127.0.0.1:8000/admin you\u2019ll be able to log in to the Django admin site. It should redirect you to this page:\r\n\r\nAdmin Homepage\r\n\r\nClick on the \u201c+ Add\u201d link next to Posts. You can add whatever you like but for this tutorial I\u2019m making a post on the Django Pony mascot. You can download it here yourself if you like.\r\n\r\nDjango Pony Post\r\n\r\nUpon \u201cSave\u201d you will be redirected to the Posts page where we can see all our posts.\r\n\r\nImage Posts\r\n\r\nIf you look within the local media folder in your project you\u2019ll see under images there is now the djangopony.png image file. See! I told you that was what MEDIA_URL would do.\r\n\r\nOk, so at this point we\u2019re done with the basics. But let\u2019s take it a step further and display our posts which means urls.py, views.py, and template files.\r\n\r\nURLs\r\nThe confusing thing about Django is that you often need 4 different but interconnected files for one webpage: models.py, urls.py, views.py, and a template html file. I find it easiest to reason about this by going in order from models -> urls -> views -> template files. Our model is already done so that means diving into URL routes.\r\n\r\nWe\u2019ll need two urls.py file updates. First at the project-level insta_project/urls.py files we need to add imports for settings, include, and static. Then define a route for the posts app. Note we also need to add the MEDIA_URL if settings are in DEBUG mode, otherwise we won\u2019t be able to view uploaded images locally.\r\n\r\n# insta_project/urls.py\r\nfrom django.contrib import admin\r\nfrom django.conf import settings # new\r\nfrom django.urls import path, include # new\r\nfrom django.conf.urls.static import static # new\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('', include('posts.urls')), # new\r\n]\r\n\r\nif settings.DEBUG: # new\r\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\nNext we\u2019ll need to sort out the URL routes within the posts app. First create that file.\r\n\r\n(insta) $ touch posts/urls.py\r\nThen we\u2019ll put all posts on the homepage so again use the empty string '' as our route path.\r\n\r\n# posts/urls.py\r\nfrom django.urls import path\r\n\r\nfrom .views import HomePageView\r\n\r\nurlpatterns = [\r\n    path('', HomePageView.as_view(), name='home'),\r\n]\r\nThis references a view called HomePageView which we\u2019ll create next.\r\n\r\nViews\r\nWe can use the generic class-based ListView here, import our Post model, and then create a HomePageView that uses the model and a template called home.html.\r\n\r\n# posts/views.py\r\nfrom django.views.generic import ListView\r\nfrom .models import Post\r\n\r\n\r\nclass HomePageView(ListView):\r\n    model = Post\r\n    template_name = 'home.html'\r\nBoom! Moving on the last step is that template file called home.html.\r\n\r\nTemplates\r\nWe have two choices for our template\u2019s location. We could put it within the posts app at posts/templates/posts/home.html but I find that structure redundant. Plus it\u2019s harder to reason about templates when they are all buried within their respective apps. So typically I will instead create a project-level templates directory.\r\n\r\n$ mkdir templates\r\n$ touch templates/home.html\r\nWe tell Django to also look here for any templates by updating the TEMPLATES configuration within insta_project/settings.py.\r\n\r\n# insta_project/settings.py\r\nTEMPLATES = [\r\n    {\r\n        ...\r\n        'DIRS': [os.path.join(BASE_DIR, 'templates')], # new\r\n        ...\r\n    },\r\n]\r\nOur home.html template file will display the title and image for all posts. Just like Instagram would :)\r\n\r\n<!-- templates/home.html -->\r\n<h1>Django Image Uploading</h1>\r\n<ul>\r\n  {% for post in object_list %}\r\n    <h2>{{ post.title }}</h2>\r\n    <img src=\"{{ post.cover.url}}\" alt=\"{{ post.title }}\">\r\n  {% endfor %}\r\n</ul>\r\nOk, that\u2019s it! Make sure the server is running with the python manage.py runserver command and navigate to our homepage at http://127.0.0.1:8000. Refresh the page if needed.\r\n\r\nHomepage\r\n\r\nAnd voila! If you add additional posts with a title and image via the admin they will appear on the homepage.\r\n\r\nForm\r\nNow we can add a form so regular users, who wouldn\u2019t have access to the admin, can also add posts. That means creating a new page with a form.\r\n\r\nLet\u2019s start with the views.py file. We\u2019ll name our new view CreatePostView which will extend the built-in Django CreateView. We\u2019ll also import reverse_lazy to handle the redirect back to our homepage after the form has been submitted.\r\n\r\nWithin the view we specify the model, a form_class which we\u2019ll create next, the template_name, and finally a success_url which is what we want to happen after submission.\r\n\r\n# posts/views.py\r\nfrom django.views.generic import ListView, CreateView # new\r\nfrom django.urls import reverse_lazy # new\r\n\r\nfrom .forms import PostForm # new\r\nfrom .models import Post\r\n\r\nclass HomePageView(ListView):\r\n    model = Post\r\n    template_name = 'home.html'\r\n\r\nclass CreatePostView(CreateView): # new\r\n    model = Post\r\n    form_class = PostForm\r\n    template_name = 'post.html'\r\n    success_url = reverse_lazy('home')\r\nNext up that form. First create it.\r\n\r\n(insta) $ touch posts/forms.py\r\nWe can extend Django\u2019s built-in ModelForm. All we need for our basic form is to specify the correct model Post and the fields we want displayed which are title and cover.\r\n\r\n# posts/forms.py\r\nfrom django import forms\r\nfrom .models import Post\r\n\r\nclass PostForm(forms.ModelForm):\r\n\r\n    class Meta:\r\n        model = Post\r\n        fields = ['title', 'cover']\r\nWe\u2019ll make a dedicated page for this form at the path of post/.\r\n\r\n# posts/urls.py\r\nfrom django.urls import path\r\n\r\nfrom .views import HomePageView, CreatePostView # new\r\n\r\nurlpatterns = [\r\n    path('', HomePageView.as_view(), name='home'),\r\n    path('post/', CreatePostView.as_view(), name='add_post') # new\r\n]\r\nThen create the new template.\r\n\r\n(insta) $ touch templates/post.html\r\nAnd fill it with a headline and form. It\u2019s important to always add csrf_token for protection. We\u2019re specifiying form.as_p which means Django will output each field as a paragraph tag.\r\n\r\n<!-- templates/post.html -->\r\n<h1>Create Post Page</h1>\r\n<form method=\"post\" enctype=\"multipart/form-data\">\r\n  {% csrf_token %}\r\n  {{ form.as_p }}\r\n  <button type=\"submit\">Submit New Post</button>\r\n</form>\r\nThat\u2019s it! Make sure your server is running and go to the page at http://127.0.0.1:8000/post/.\r\n\r\nCreate Post\r\n\r\nAfter you submit a new post you\u2019ll be redirected back to the homepage and will see all the posts.\r\n\r\nNext Steps\r\nWhere to go from here? You probably want to put restrictions around the image size which can be done initially in the models.py file or with CSS. Perhaps you want to add edit and delete options as well for the Post.\r\n\r\nThe biggest upgrade is that in production you do not want to host files on within Django. It\u2019s far preferable to configure a dedicated external service like a Content Delivery Network (CDN) for this purpose which I cover in my book Django for Professionals.", "modified": "2019-02-26T21:00:50.743Z", "draft": false, "pub_date": "2019-02-25"}}, {"model": "article.article", "pk": 2, "fields": {"title": "Mark Down Test", "slug": "mark-down-test", "body": "Here's our logo (hover to see the title text):\r\n\r\nInline-style: \r\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\r\n\r\nReference-style: \r\n![alt text][logo]\r\n\r\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\r\nHere's our logo (hover to see the title text):\r\n\r\nInline-style: alt text\r\n\r\nReference-style: alt text\r\n\r\nCode and Syntax Highlighting\r\nCode blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and Markdown Here -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page.\r\n\r\nInline `code` has `back-ticks around` it.\r\nInline code has back-ticks around it.\r\n\r\nBlocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.\r\n\r\n```javascript\r\nvar s = \"JavaScript syntax highlighting\";\r\nalert(s);\r\n```\r\n \r\n```python\r\ns = \"Python syntax highlighting\"\r\nprint s\r\n```\r\n \r\n```\r\nNo language indicated, so no syntax highlighting. \r\nBut let's throw in a <b>tag</b>.\r\n```\r\nvar s = \"JavaScript syntax highlighting\";\r\nalert(s);\r\ns = \"Python syntax highlighting\"\r\nprint s\r\nNo language indicated, so no syntax highlighting in Markdown Here (varies on Github). \r\nBut let's throw in a <b>tag</b>.\r\nTables\r\nTables aren't part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.\r\n\r\nColons can be used to align columns.\r\n\r\n| Tables        | Are           | Cool  |\r\n| ------------- |:-------------:| -----:|\r\n| col 3 is      | right-aligned | $1600 |\r\n| col 2 is      | centered      |   $12 |\r\n| zebra stripes | are neat      |    $1 |\r\n\r\nThere must be at least 3 dashes separating each header cell.\r\nThe outer pipes (|) are optional, and you don't need to make the \r\nraw Markdown line up prettily. You can also use inline Markdown.\r\n\r\nMarkdown | Less | Pretty\r\n--- | --- | ---\r\n*Still* | `renders` | **nicely**\r\n1 | 2 | 3\r\nColons can be used to align columns.\r\n\r\nTables\tAre\tCool\r\ncol 3 is\tright-aligned\t$1600\r\ncol 2 is\tcentered\t$12\r\nzebra stripes\tare neat\t$1\r\nThere must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.\r\n\r\nMarkdown\tLess\tPretty\r\nStill\trenders\tnicely\r\n1\t2\t3\r\nBlockquotes\r\n> Blockquotes are very handy in email to emulate reply text.\r\n> This line is part of the same quote.\r\n\r\nQuote break.\r\n\r\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \r\nBlockquotes are very handy in email to emulate reply text. This line is part of the same quote.\r\n\r\nQuote break.\r\n\r\nThis is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.\r\n\r\nInline HTML\r\nYou can also use raw HTML in your Markdown, and it'll mostly work pretty well.\r\n\r\n<dl>\r\n  <dt>Definition list</dt>\r\n  <dd>Is something people use sometimes.</dd>\r\n\r\n  <dt>Markdown in HTML</dt>\r\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\r\n</dl>\r\nDefinition list\r\nIs something people use sometimes.\r\nMarkdown in HTML\r\nDoes *not* work **very** well. Use HTML tags.\r\nHorizontal Rule\r\nThree or more...\r\n\r\n---\r\n\r\nHyphens\r\n\r\n***\r\n\r\nAsterisks\r\n\r\n___\r\n\r\nUnderscores\r\nThree or more...\r\n\r\nHyphens\r\n\r\nAsterisks\r\n\r\nUnderscores\r\n\r\nLine Breaks\r\nMy basic recommendation for learning how line breaks work is to experiment and discover -- hit <Enter> once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend.\r\n\r\nHere are some things to try out:\r\n\r\nHere's a line for us to start with.\r\n\r\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\r\n\r\nThis line is also a separate paragraph, but...\r\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\r\nHere's a line for us to start with.\r\n\r\nThis line is separated from the one above by two newlines, so it will be a separate paragraph.\r\n\r\nThis line is also begins a separate paragraph, but...\r\nThis line is only separated by a single newline, so it's a separate line in the same paragraph.\r\n\r\n(Technical note: Markdown Here uses GFM line breaks, so there's no need to use MD's two-space line breaks.)\r\n\r\nYouTube Videos\r\nThey can't be added directly but you can add an image with a link to the video like this:\r\n\r\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=YOUTUBE_VIDEO_ID_HERE\r\n\" target=\"_blank\"><img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\" \r\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /></a>\r\nOr, in pure Markdown, but losing the image sizing and border:\r\n\r\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\r\nReferencing a bug by #bugID in your git commit links it to the slip. For example #1.\r\n\r\nLicense: CC-BY\r\n\r\n Pages 10\r\nFind a Page\u2026\r\nHome\r\nCompatibility\r\nDevelopment Notes\r\nMarkdown Cheatsheet\r\nMarkdown Here Cheatsheet\r\nOther Markdown Tools\r\nPress, Posts, Reviews, Etc.\r\nReviews\r\nTips and Tricks\r\nTroubleshooting\r\nClone this wiki locally", "modified": "2019-02-25T23:14:04.197Z", "draft": false, "pub_date": "2019-02-25"}}, {"model": "article.article", "pk": 25, "fields": {"title": "My Favorite Towqwwqyeweew", "slug": "my-favorite-towqwwqyeweew", "body": "wewew", "modified": "2019-02-26T21:08:07.614Z", "draft": false, "pub_date": "2019-02-26"}}, {"model": "article.article", "pk": 26, "fields": {"title": "Django generic foreign key and contenttypes", "slug": "django-generic-foreign-key-and-contenttypes", "body": "Usage:  Comments/Reviews/\r\n\r\nfrom django.contrib.contenttypes.models import ContentType\r\nThe  ContentType is the heart of the contenttypes applicationre \r\n\r\nA normal ForeignKey can only \"point to\" one other model, which means that if the TaggedItem model used a ForeignKey it would have to choose one and only one model to store tags for. \r\nThe contenttypes application provides a special field type (GenericForeignKey) which works around this and allows the relationship to be with any model:\r\n\r\n\r\nclass GenericForeignKey\u00b6\r\nThere are three parts to setting up a GenericForeignKey:\r\n\r\nGive your model a ForeignKey to ContentType. The usual name for this field is \"content_type\".\r\nGive your model a field that can store primary key values from the models you'll be relating to. For most models, this means a PositiveIntegerField. The usual name for this field is \"object_id\".\r\nGive your model a GenericForeignKey, and pass it the names of the two fields described above. If these fields are named \"content_type\" and \"object_id\", you can omit this -- those are the default field names GenericForeignKey will look for.\r\n\r\n\r\n>>> from django.contrib.auth.models import User\r\n>>> guido = User.objects.get(username='Guido')\r\n>>> t = TaggedItem(content_object=guido, tag='bdfl')\r\n>>> t.save()\r\n>>> t.content_object\r\n<User: Guido>", "modified": "2019-02-28T02:06:12.002Z", "draft": false, "pub_date": "2019-02-28"}}, {"model": "article.article", "pk": 27, "fields": {"title": "Postgres GUI tool", "slug": "postgres-gui-tool", "body": "Postgres GUI tool\r\nIn order to keep tracking of the Postgres Database, I use a Postgres GUI tool called: *postico*. \r\nIt's free and easy to install.", "modified": "2019-03-07T03:52:24.986Z", "draft": false, "pub_date": "2019-03-03"}}, {"model": "article.article", "pk": 28, "fields": {"title": "How to fetch data from GoodRead API by python?", "slug": "how-to-fetch-data-from-goodread-api-by-python", "body": "How to fetch data from GoodRead API by python?\r\nIn my recent Django project, I was using an ISBN library on GitHub to get the Book data. Then I found those APIs, Google Book API and GoodReads API. I realized how simple it is to get customized data through the API. This post will focus on using inbuilt XML module in python for parsing XML and the main focus will be on the ElementTree XML API of this module.\r\n\r\nFirst, you can get a API keys and secret from https://www.goodreads.com/api/keys  .\r\n\r\nThe Goodreads API allows developers access to Goodreads data in order to help websites or applications that deal with books be more personalized, social, and engaging. And the API is in the 'xml' format. \r\n\r\nHere is an example of the API looks like 'https://www.goodreads.com/book/isbn/0441172717?key=1emC5V4L1aQXNtWBo7SpKw'.\r\nFirst, we will creating HTTP response object from given url by providing a random isbn.\r\n***\r\n    isbn = \"0134190440\"\r\n    key = \"YOUR_API_KEY\"\r\n    # creating HTTP response object from given url \r\n    response = requests.get('https://www.goodreads.com/book/isbn/'+isbn+'?key='+key)\r\n***\r\nSecond, We will use the \r\n    root = ET.fromstring(response.content)\r\n\r\n    for book in root.findall('book'):\r\n        title            = book.find('title').text\r\n        isbn             = book.find('isbn').text\r\n        image_url        = book.find('image_url').text\r\n        small_image_url  = book.find('small_image_url').text\r\n        description      = book.find('description').text\r\n        publication_year = book.find('publication_year').text\r\n        publisher        = book.find('publisher').text\r\n        average_rating   =book.find('average_rating').text\r\n        ratings_count    = book.find('ratings_count').text\r\n        author    = book.find('authors').find('author').find('name').text\r\n***\r\n'''{'title': 'The Go Programming Language', 'isbn10': '0134190440', 'image_url': 'https://images.gr-assets.com/books/1426831830m/25080953.jpg', 'small_image_url': 'https://images.gr-assets.com/books/1426831830s/25080953.jpg', 'publisher': 'Addison-Wesley', 'publication_year': '2015', 'average_rating': '4.45', 'ratings_count': '456', 'author': 'Alan A. A. Donovan'}'''\r\n\r\n***\r\nYou can read more about the xml parsing on Python official document: https://docs.python.org/3/library/xml.etree.elementtree.html", "modified": "2019-03-07T04:29:36.214Z", "draft": false, "pub_date": "2019-03-07"}}, {"model": "article.article", "pk": 29, "fields": {"title": "Django Restful API Tuturial", "slug": "django-restful-api-tuturial", "body": "Django-Restful-API-Tuturial", "modified": "2019-03-08T17:15:57.081Z", "draft": false, "pub_date": "2019-03-08"}}, {"model": "article.images", "pk": 9, "fields": {"article": 1, "image": "article_images/django-file-and-image-uploads-tutorial-IMG_7182.JPG"}}, {"model": "article.images", "pk": 12, "fields": {"article": 25, "image": "article_images/my-favorite-towqwwqyeweew-IMG_1935.jpeg"}}, {"model": "article.images", "pk": 13, "fields": {"article": 27, "image": "article_images/postgres-gui-tool-Screen_Shot_2019-03-06_at_7.50.43_PM.png"}}, {"model": "article.images", "pk": 14, "fields": {"article": 28, "image": "article_images/how-to-fetch-data-from-goodread-api-by-python-Screen_Shot_2019-03-06_at_8_0uIGk2h.png"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can view log entry", "content_type": 1, "codename": "view_logentry"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can add permission", "content_type": 2, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can change permission", "content_type": 2, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can delete permission", "content_type": 2, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can view permission", "content_type": 2, "codename": "view_permission"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can add group", "content_type": 3, "codename": "add_group"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can change group", "content_type": 3, "codename": "change_group"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can delete group", "content_type": 3, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can view group", "content_type": 3, "codename": "view_group"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add user", "content_type": 4, "codename": "add_user"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change user", "content_type": 4, "codename": "change_user"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete user", "content_type": 4, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can view user", "content_type": 4, "codename": "view_user"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can add content type", "content_type": 5, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can change content type", "content_type": 5, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can delete content type", "content_type": 5, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can view content type", "content_type": 5, "codename": "view_contenttype"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can add session", "content_type": 6, "codename": "add_session"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can change session", "content_type": 6, "codename": "change_session"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can delete session", "content_type": 6, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can view session", "content_type": 6, "codename": "view_session"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add article", "content_type": 7, "codename": "add_article"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change article", "content_type": 7, "codename": "change_article"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete article", "content_type": 7, "codename": "delete_article"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can view article", "content_type": 7, "codename": "view_article"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can add images", "content_type": 8, "codename": "add_images"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can change images", "content_type": 8, "codename": "change_images"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can delete images", "content_type": 8, "codename": "delete_images"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can view images", "content_type": 8, "codename": "view_images"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$120000$C3h306bYPDE7$9rCxjoPz+CWoSSP4JetJiJdsiMfCnFvZfY+OJ9FzoDw=", "last_login": "2019-03-08T17:44:01.049Z", "is_superuser": true, "username": "parisa", "first_name": "", "last_name": "", "email": "", "is_staff": true, "is_active": true, "date_joined": "2019-02-25T18:49:19.251Z", "groups": [], "user_permissions": []}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2019-02-25T18:49:43.016Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "first post", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2019-02-25T19:47:46.783Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "First Post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"slug\", \"body\"]}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2019-02-25T19:47:56.730Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "second post", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2019-02-25T20:34:26.656Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "second post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2019-02-25T20:36:36.332Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "second post", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2019-02-25T20:57:48.787Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "second post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2019-02-25T21:03:32.086Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "First Post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2019-02-25T21:03:46.958Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "First Post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2019-02-25T21:04:43.556Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "First Post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2019-02-25T21:08:19.335Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "First Post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2019-02-25T21:15:09.237Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Django File (and Image) Uploads Tutorial", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"body\"]}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2019-02-25T21:16:02.644Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "second post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2019-02-25T21:23:21.703Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"slug\"]}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2019-02-25T21:23:44.951Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2019-02-25T22:07:53.194Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2019-02-25T22:08:11.106Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2019-02-25T22:16:49.380Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2019-02-25T22:17:35.073Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2019-02-25T22:18:41.914Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"draft\"]}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2019-02-25T22:19:03.874Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"draft\"]}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2019-02-25T22:23:55.574Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2019-02-25T22:24:55.087Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2019-02-25T22:31:21.928Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2019-02-25T22:36:05.977Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"draft\"]}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2019-02-25T22:46:13.917Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "eee", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2019-02-25T22:54:01.733Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"draft\"]}}]"}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2019-02-25T22:54:32.732Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"draft\", \"publish\"]}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2019-02-25T22:55:12.735Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "eee", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"publish\"]}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2019-02-25T22:55:33.431Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "eee", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2019-02-25T22:56:18.848Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "eee", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"draft\"]}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2019-02-25T22:56:28.590Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"draft\"]}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2019-02-25T22:56:41.444Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"publish\"]}}]"}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2019-02-25T22:58:54.701Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2019-02-25T23:03:35.541Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"height_field\", \"width_field\"]}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2019-02-25T23:05:09.440Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2019-02-25T23:14:04.199Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Mark Down Test", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2019-02-26T02:47:51.299Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "eee", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"draft\", \"pub_date\"]}}]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2019-02-26T02:48:28.259Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "eee", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"draft\"]}}]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2019-02-26T02:49:17.571Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "eee", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"draft\", \"pub_date\"]}}]"}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2019-02-26T02:49:32.063Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "eee", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"pub_date\"]}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2019-02-26T16:48:52.877Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "My Favorite Toymm", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"pub_date\"]}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2019-02-26T16:57:39.526Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "eeee", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"pub_date\"]}}]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2019-02-26T17:30:08.940Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Hello, 2019!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"pub_date\"]}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2019-02-26T18:09:32.017Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "ds", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"pub_date\"]}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2019-02-26T18:30:43.943Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "eweq1", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"pub_date\"]}}]"}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2019-02-26T20:59:58.402Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "eee", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2019-02-26T20:59:58.406Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "eweq1", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2019-02-26T20:59:58.410Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "ds", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2019-02-26T20:59:58.412Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Hello, 2019!", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2019-02-26T20:59:58.416Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "eeee", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2019-02-26T20:59:58.420Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "My Favorite Toymm", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2019-02-26T20:59:58.422Z", "user": 1, "content_type": 7, "object_id": "22", "object_repr": "My Favorite Toyee", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2019-02-26T20:59:58.424Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "dsadsa2222", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 54, "fields": {"action_time": "2019-02-26T20:59:58.426Z", "user": 1, "content_type": 7, "object_id": "19", "object_repr": "whats wring", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 55, "fields": {"action_time": "2019-02-26T20:59:58.428Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "dsadsdsdsddddfsdsfds", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 56, "fields": {"action_time": "2019-02-26T20:59:58.430Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "dsadsa", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 57, "fields": {"action_time": "2019-02-26T20:59:58.432Z", "user": 1, "content_type": 7, "object_id": "16", "object_repr": "lasr", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 58, "fields": {"action_time": "2019-02-26T20:59:58.435Z", "user": 1, "content_type": 7, "object_id": "15", "object_repr": "no photo>", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 59, "fields": {"action_time": "2019-02-26T20:59:58.437Z", "user": 1, "content_type": 7, "object_id": "14", "object_repr": "newe", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 60, "fields": {"action_time": "2019-02-26T20:59:58.439Z", "user": 1, "content_type": 7, "object_id": "13", "object_repr": "ewqewqewqeqwewqewq", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 61, "fields": {"action_time": "2019-02-26T20:59:58.441Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "ewqe", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 62, "fields": {"action_time": "2019-02-26T20:59:58.443Z", "user": 1, "content_type": 7, "object_id": "11", "object_repr": "dadasdsadds", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 63, "fields": {"action_time": "2019-02-26T20:59:58.445Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "testing", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 64, "fields": {"action_time": "2019-02-26T20:59:58.447Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "eweq", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 65, "fields": {"action_time": "2019-02-26T20:59:58.449Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "My Favorite Toy", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 66, "fields": {"action_time": "2019-02-26T21:00:21.136Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Django File (and Image) Uploads Tutorial", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 67, "fields": {"action_time": "2019-02-26T21:00:50.747Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Django File (and Image) Uploads Tutorial", "action_flag": 2, "change_message": "[{\"added\": {\"name\": \"images\", \"object\": \"Images object (9)\"}}]"}}, {"model": "admin.logentry", "pk": 68, "fields": {"action_time": "2019-02-26T21:08:07.617Z", "user": 1, "content_type": 7, "object_id": "25", "object_repr": "My Favorite Towqwwqyeweew", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"pub_date\"]}}]"}}, {"model": "admin.logentry", "pk": 69, "fields": {"action_time": "2019-02-28T00:51:41.266Z", "user": 1, "content_type": 7, "object_id": "24", "object_repr": "My Favorite Toyeweew", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 70, "fields": {"action_time": "2019-02-28T00:51:41.270Z", "user": 1, "content_type": 7, "object_id": "23", "object_repr": "My Favorite Toyeww", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 71, "fields": {"action_time": "2019-02-28T02:06:12.005Z", "user": 1, "content_type": 7, "object_id": "26", "object_repr": "Django generic foreign key and contenttypes", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 72, "fields": {"action_time": "2019-03-03T19:32:57.319Z", "user": 1, "content_type": 7, "object_id": "27", "object_repr": "Postgres GUI tool", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 73, "fields": {"action_time": "2019-03-07T03:51:15.413Z", "user": 1, "content_type": 7, "object_id": "27", "object_repr": "Postgres GUI tool", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}, {\"added\": {\"name\": \"images\", \"object\": \"Images object (13)\"}}]"}}, {"model": "admin.logentry", "pk": 74, "fields": {"action_time": "2019-03-07T03:52:01.550Z", "user": 1, "content_type": 7, "object_id": "27", "object_repr": "Postgres GUI tool", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 75, "fields": {"action_time": "2019-03-07T03:52:24.990Z", "user": 1, "content_type": 7, "object_id": "27", "object_repr": "Postgres GUI tool", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 76, "fields": {"action_time": "2019-03-07T04:00:35.375Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "How to fetch data from GoodRead API by python?", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 77, "fields": {"action_time": "2019-03-07T04:06:40.946Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "How to fetch data from GoodRead API by python?", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 78, "fields": {"action_time": "2019-03-07T04:10:16.965Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "How to fetch data from GoodRead API by python?", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 79, "fields": {"action_time": "2019-03-07T04:11:07.701Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "How to fetch data from GoodRead API by python?", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 80, "fields": {"action_time": "2019-03-07T04:15:56.909Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "How to fetch data from GoodRead API by python?", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 81, "fields": {"action_time": "2019-03-07T04:21:13.615Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "How to fetch data from GoodRead API by python?", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 82, "fields": {"action_time": "2019-03-07T04:23:47.212Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "How to fetch data from GoodRead API by python?", "action_flag": 2, "change_message": "[{\"added\": {\"name\": \"images\", \"object\": \"Images object (14)\"}}]"}}, {"model": "admin.logentry", "pk": 83, "fields": {"action_time": "2019-03-07T04:27:21.461Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "How to fetch data from GoodRead API by python?", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 84, "fields": {"action_time": "2019-03-07T04:28:07.127Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "How to fetch data from GoodRead API by python?", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 85, "fields": {"action_time": "2019-03-07T04:29:36.221Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "How to fetch data from GoodRead API by python?", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}]